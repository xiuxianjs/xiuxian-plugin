import { useSend, Text } from 'alemonjs';
import { keys, keysAction } from '../../../../model/keys.js';
import '../../../../model/api.js';
import { getDataJSONParseByKey, setDataByKey, setDataJSONStringifyByKey, getDataByKey } from '../../../../model/DataControl.js';
import { getDataList } from '../../../../model/DataList.js';
import 'jsxp';
import 'md5';
import 'react';
import '../../../../resources/img/state.jpg.js';
import '../../../../resources/styles/tw.scss.js';
import '../../../../resources/font/tttgbnumber.ttf.js';
import 'classnames';
import '../../../../resources/img/player.jpg.js';
import '../../../../resources/img/player_footer.png.js';
import '../../../../resources/img/user_state.png.js';
import '../../../../resources/img/fairyrealm.jpg.js';
import '../../../../resources/img/card.jpg.js';
import '../../../../resources/img/road.jpg.js';
import '../../../../resources/img/user_state2.png.js';
import '../../../../resources/html/help.js';
import '../../../../resources/img/najie.jpg.js';
import '../../../../resources/img/shituhelp.jpg.js';
import '../../../../resources/img/icon.png.js';
import '../../../../resources/styles/temp.scss.js';
import 'fs';
import 'dayjs';
import 'buffer';
import '@alemonjs/db';
import { shijianc } from '../../../../model/common.js';
import { addCoin } from '../../../../model/economy.js';
import '../../../../model/settions.js';
import 'svg-captcha';
import 'sharp';
import 'lodash-es';
import '../../../../model/currency.js';
import { isKeys } from '../../../../model/utils/isKeys.js';
import 'crypto';
import 'posthog-node';
import '../../../../model/message.js';
import mw, { selects } from '../../../mw-captcha.js';

const regular = /^(#|＃|\/)?开采灵脉$/;
const 宗门灵石池上限 = [2000000, 5000000, 8000000, 11000000, 15000000, 20000000, 25000000, 30000000];
function isDateParts(v) {
    return !!v && typeof v === 'object' && 'Y' in v && 'M' in v && 'D' in v;
}
const res = onResponse(selects, async (e) => {
    const Send = useSend(e);
    const userId = e.UserId;
    const player = await getDataJSONParseByKey(keys.player(userId));
    if (!player) {
        return false;
    }
    if (!isKeys(player['宗门'], ['宗门名称'])) {
        void Send(Text('你尚未加入宗门'));
        return false;
    }
    const playerGuild = player['宗门'];
    const assRaw = await getDataJSONParseByKey(keys.association(playerGuild.宗门名称));
    if (!assRaw || !isKeys(assRaw, ['宗门名称', '宗门驻地', '宗门神兽', 'power', '宗门等级', '灵石池'])) {
        void Send(Text('宗门数据不存在'));
        return false;
    }
    const ass = assRaw;
    if (!ass.宗门驻地 || ass.宗门驻地 === 0) {
        void Send(Text('你的宗门还没有驻地哦，没有灵脉可以开采'));
        return false;
    }
    const nowTime = Date.now();
    const Today = shijianc(nowTime);
    const lastsignTime = await getLastsignExplor(userId);
    if (isDateParts(Today) && isDateParts(lastsignTime)) {
        if (Today.Y === lastsignTime.Y && Today.M === lastsignTime.M && Today.D === lastsignTime.D) {
            void Send(Text('今日已经开采过灵脉，不可以竭泽而渔哦，明天再来吧'));
            return false;
        }
    }
    await setDataByKey(keysAction.getLastSignExplor(userId), nowTime);
    const blessList = await getDataList('Bless');
    let dongTan = blessList.find(item => item.name === ass.宗门驻地);
    if (!dongTan) {
        dongTan = blessList.find(item => item.name === '昆仑山');
    }
    if (!dongTan) {
        void Send(Text('未找到灵脉信息，稍后再试'));
        return false;
    }
    const rawLevelId = player.level_id;
    const playerLevel = typeof rawLevelId === 'number' ? rawLevelId : Number(rawLevelId) || 1;
    const baseLevel = ass.宗门神兽 === '麒麟' ? dongTan.level + 1 : dongTan.level;
    let totalYield = 1200 * baseLevel * playerLevel;
    if (ass.power === 1) {
        totalYield *= 10;
    }
    const totalInt = Math.max(1, Math.trunc(totalYield));
    const giveGuild = Math.trunc(totalInt / 2);
    const givePlayer = totalInt - giveGuild;
    const guildLevel = Math.max(1, Number(ass.宗门等级 ?? 1));
    const baseCap = 宗门灵石池上限[guildLevel - 1] || 宗门灵石池上限[0];
    const cap = ass.power === 1 ? baseCap * 10 : baseCap;
    const currentPool = Math.max(0, Number(ass.灵石池 ?? 0));
    ass.灵石池 = Math.min(cap, currentPool + giveGuild);
    await addCoin(userId, givePlayer);
    await setDataJSONStringifyByKey(keys.association(ass.宗门名称), ass);
    void Send(Text(`本次开采灵脉共获得${totalInt}灵石，上交${giveGuild}灵石给宗门，自己获得${givePlayer}灵石`));
    return false;
});
async function getLastsignExplor(userId) {
    const time = await getDataByKey(keysAction.getLastSignExplor(userId));
    if (time) {
        const parts = shijianc(Number(time));
        if (isDateParts(parts)) {
            return parts;
        }
    }
    return null;
}
var res$1 = onResponse(selects, [mw.current, res.current]);

export { res$1 as default, regular };
